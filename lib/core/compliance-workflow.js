const validator = require('validator');
const utils = require('../utils');

/**
 * The Compliance Workflow service class.
 */
class ComplianceWorkflowService {
    /** 
     * @hideconstructor
     * @param {import('axios').AxiosInstance} api
     */
    constructor (api) {
        /** @ignore @protected */ this._api = api;
    }

    /** 
     * @ignore @protected
     * Validates query parameter object for getList method.
     * @param {ComplianceWorkflowListQuery} query - An object containing key value pair for filtering the results list.
     */
    _validateGetListQuery(query) {
        if (!utils.isObject(query)) {
            throw new Error('"query" must be a ComplianceWorkflowListQuery object.');
        } else {
            if ('customer_uid' in query && !Array.isArray(query.customer_uid)) {
                throw new Error('"customer_uid" query must be an array.');
            }

            if ('product_uid' in query && !Array.isArray(query.product_uid)) {
                throw new Error('"product_uid" query must be an array.');
            }

            if ('in_progress' in query && (!utils.isBoolean(query.in_progress))) {
                throw new Error('"in_progress" query must be a boolean.');
            }

            if ('limit' in query && !Number.isInteger(query.limit)) {
                throw new Error('"limit" query must be an integer.');
            }

            if ('offset' in query && !Number.isInteger(query.offset)) {
                throw new Error('"offset" query must be an integer.');
            }
        }
    }

    /**
     * @ignore
     * @protected
     * @param {string} complianceWorkflowUid - A UID referring to the Compliance Workflow.
     * @param {string} customerUid - A UID referring to the Customer.
     */
    _validateAcknowledgeDocumentParams(complianceWorkflowUid, customerUid) {
        if (validator.isEmpty(complianceWorkflowUid, { ignore_whitespace: true })) {
            throw new Error('"complianceWorkflowUid" is required.');
        }
        if (validator.isEmpty(customerUid, { ignore_whitespace: true })) {
            throw new Error('"customerUid" is required.');
        }
    }

    /**
     * @ignore
     * @protected
     * @param {ComplianceDocumentAcknowledgementRequest} document
     */
    _validateAcknowledgeDocumentDocument(document) {
        const { document_uid, accept } = document;
        
        if (validator.isEmpty(document_uid, { ignore_whitespace: true })) {
            throw new Error('"document_uid" is required.');
        }
        if (accept !== 'yes' && accept !== 'no') {
            throw new Error('The value for "accept" is should be either "yes" or "no".');
        }
    }

    /**
     * Retrieves a list of Compliance Workflows filtered by the given parameters. 
     * Filter parameters are not case sensitive, but will only return exact matches. 
     * Multiple filter parameters can be provided at once, but a result will not be returned unless there are exact matches for all submitted parameters.
     * @param {ComplianceWorkflowListQuery} query - An object containing key value pair for filtering the results list.
     * @returns {Promise<RizeList<ComplianceWorkflow>>} - A promise that returns a Compliance Workflow list if resolved.
     * @example
     * const complianceWorkflowList = await rize.complianceWorkflow.getList({
     *     customer_uid: [customerUid],
     *     product_uid: [productUid],
     *     limit: 50,
     *     offset: 0,
     * });
     */
    async getList(query = {}) {
        this._validateGetListQuery(query);
        const queryParameters = [
            'customer_uid',
            'product_uid',
            'in_progress',
            'limit',
            'offset'
        ];

        const queryStr = utils.toQueryString(query, queryParameters);

        const response = await this._api.get(`/compliance_workflows/${queryStr}`);

        return response.data;
    }

    /**
     * Creates a new Compliance Workflow.
     * @param {string} customerUid - A UID referring to the Customer generated by Rize
     * @param {string} productCompliancePlanUid - A unique identifier for a Compliance Plan
     * @returns {Promise<ComplianceWorkflow>} - A promise that returns the new Compliance Workflow if resolved.
     * @example
     * const newWorkflow = await rize.complianceWorkflow.create('4Qp6ytVLKg4tvR112', 'compliance-plan-123'); 
     */
    async create (customerUid, productCompliancePlanUid) {
        if (validator.isEmpty(customerUid, { ignore_whitespace: true })) {
            throw new Error('"customerUid" is required.');
        }
        if (validator.isEmpty(productCompliancePlanUid, { ignore_whitespace: true })) {
            throw new Error('"productCompliancePlanUid" is required.');
        }

        const response = await this._api.post(
            '/compliance_workflows',
            {
                'customer_uid': customerUid,
                'product_compliance_plan_uid': productCompliancePlanUid
            }
        );

        return response.data;
    }

    /**
     * Renew a Compliance Workflow after it expired the given timeframe
     * @param {string} customerExternalUid - A Customer identifier supplied by the Partner, unique among the collection of all partner Customers.
     * @param {string} customerUid - A UID referring to the Customer generated by Rize
     * @param {string} email - Email address associated with the Customer.
     * @returns {Promise<ComplianceWorkflow>} A promise that returns the new Compliance Workflow entity if resolved.
     */
    async renew (customerExternalUid, customerUid, email) {
        if (validator.isEmpty(customerExternalUid, { ignore_whitespace: true })) {
            throw new Error('"customerExternalUid" is required.');
        }
        if (validator.isEmpty(customerUid, { ignore_whitespace: true })) {
            throw new Error('"customerUid" is required.');
        }
        if (!validator.isEmail(email)) {
            throw new Error('"email" is invalid.');
        }

        const response = await this._api.post(
            '/compliance_workflows',
            {
                'customer_external_uid': customerExternalUid,
                'customer_uid': customerUid,
                'email': email
            }
        );

        return response.data;
    }

    /**
     * Retrieves the most recent Compliance Workflow for a Customer.
     * @param {string} customerUid - A UID referring to the Customer
     * @returns {Promise<ComplianceWorkflow>} - A promise that returns the latest Compliance Workflow if resolved.
     * @example
     * const latestWorkflow = await rize.complianceWorkflow.viewLatest('h9MzupcjtA3LPW2e'); 
     */
    async viewLatest (customerUid) {
        if (validator.isEmpty(customerUid, { ignore_whitespace: true })) {
            throw new Error('"customerUid" is required.');
        }

        const response = await this._api.get(`/compliance_workflows/latest/${customerUid}`);

        return response.data;
    }

    /**
     * Indicate acceptance or rejection of Compliance Documents within a given Compliance Workflow.
     * @param {string} complianceWorkflowUid - A UID referring to the Compliance Workflow.
     * @param {string} customerUid - A UID referring to the Customer.
     * @param {ComplianceDocumentAcknowledgementRequest | Array<ComplianceDocumentAcknowledgementRequest>} documents
     * @returns {Promise<ComplianceWorkflow>} - A promise that returns the updated Compliance Workflow if resolved.
     * @example
     * // Acknowledge a single compliance document
     * const updatedWorkflow = await rize.complianceWorkflow.acknowledgeComplianceDocuments(
     *     'SPbiwv93C6M5pSWu', //complianceWorkflowUid
     *     'h9MzupcjtA3LPW2e', //customerUid
     *     {
     *         document_uid: 'Yqyjk5b2xgQ9FrxS',
     *         accept: 'yes',
     *         user_name: 'Olive Oyl',
     *         ip_address: '152.32.111.61'
     *     }
     * );
     * 
     * // Acknowledge multiple compliance documents
     * const updatedWorkflow = await rize.complianceWorkflow.acknowledgeComplianceDocuments(
     *     'SPbiwv93C6M5pSWu', //complianceWorkflowUid
     *     'h9MzupcjtA3LPW2e', //customerUid
     *     [{
     *         document_uid: 'Yqyjk5b2xgQ9FrxS',
     *         accept: 'yes',
     *         user_name: 'Olive Oyl',
     *         ip_address: '152.32.111.61'
     *     }, {
     *         document_uid: 'dc6PApa2nn9K3jwL',
     *         accept: 'yes',
     *         user_name: 'Olive Oyl',
     *         ip_address: '152.32.111.61'
     *     }])
     * );
     */
    async acknowledgeComplianceDocuments(
        complianceWorkflowUid,
        customerUid,
        documents
    ) {
        this._validateAcknowledgeDocumentParams(complianceWorkflowUid, customerUid);

        if (!documents || documents.length === 0) {
            throw new Error('Please submit at least one document.');
        }

        const docs = Array.isArray(documents) ? documents : [documents];
        
        docs.forEach(this._validateAcknowledgeDocumentDocument);

        const response = await this._api.put(
            `/compliance_workflows/${complianceWorkflowUid}/batch_acknowledge_documents`,
            {
                'customer_uid': customerUid,
                'documents': docs.map(doc => ({
                    'accept': doc.accept,
                    'document_uid': doc.document_uid,
                    'ip_address': doc.ip_address,
                    'user_name': doc.user_name
                }))
            }
        );

        return response.data;
    }
}

module.exports = ComplianceWorkflowService;

/** 
 * @typedef {import('./typedefs/compliance-workflow.typedefs').ComplianceWorkflow} ComplianceWorkflow
 * @typedef {import('./typedefs/compliance-workflow.typedefs').ComplianceDocumentAcknowledgementRequest} ComplianceDocumentAcknowledgementRequest
 */