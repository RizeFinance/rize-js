export = ComplianceWorkflow;
/**
 * The Compliance Workflow resource class.
 */
declare class ComplianceWorkflow {
    /**
     * @hideconstructor
     * @param {import('axios').AxiosInstance} api
     * @param {import('./auth')} auth
     */
    constructor(api: import('axios').AxiosInstance, auth: import('./auth'));
    /** @ignore @protected */ protected _api: import("axios").AxiosInstance;
    /** @ignore @protected */ protected _auth: import("./auth");
    /**
     * Create a new Compliance Workflow.
     * @param {string} customerExternalUid - A Customer identifier supplied by the Partner, unique among the collection of all partner Customers.
     * @param {string} email - Email address associated with the Customer.
     * @returns {Promise<ComplianceWorkflowEntity>} A promise that returns the new Compliance Workflow entity if resolved.
     */
    create(customerExternalUid: string, email: string): Promise<ComplianceWorkflowEntity>;
    /**
     * Renew a Compliance Workflow after it expired the given timeframe
     * @param {string} customerExternalUid - A Customer identifier supplied by the Partner, unique among the collection of all partner Customers.
     * @param {string} email - Email address associated with the Customer.
     * @param {string} customerUid - A UID referring to the Customer generated by Rize
     * @returns {Promise<ComplianceWorkflowEntity>} A promise that returns the new Compliance Workflow entity if resolved.
     */
    renew(customerExternalUid: string, email: string, customerUid: string): Promise<ComplianceWorkflowEntity>;
    /**
     * Retrieves the most recent Compliance Workflow for a Customer.
     * @param {string} customerUid - A UID referring to the Customer
     * @returns {Promise<ComplianceWorkflowEntity>}
     */
    viewLatest(customerUid: string): Promise<ComplianceWorkflowEntity>;
    acknowledgeComplianceDocument(workflowUid: any, documentUid: any): void;
}
declare namespace ComplianceWorkflow {
    export { ComplianceWorkflowEntity };
}
type ComplianceWorkflowEntity = {
    /**
     * - A unique identifier generated by Rize.
     */
    uid: string;
    summary: import("./typedefs/compliance-workflow.typedefs").ComplianceWorkflowEntitySummary;
    customer: import("./typedefs/compliance-workflow.typedefs").ComplianceWorkflowEntityCustomer;
    accepted_documents: import("./typedefs/compliance-workflow.typedefs").ComplianceDocument[];
    /**
     * - Compliance Documents that await acknowledgment in the current Step
     */
    current_step_documents_pending: Pick<import("./typedefs/compliance-workflow.typedefs").ComplianceDocument, "electronic_signature_required" | "external_storage_name" | "compliance_document_url" | "name" | "step" | "version" | "uid">[];
    /**
     * - The set of all Compliance Documents that would require acknowledgment
     */
    all_documents: Pick<import("./typedefs/compliance-workflow.typedefs").ComplianceDocument, "electronic_signature_required" | "external_storage_name" | "compliance_document_url" | "name" | "step" | "version">[];
};
