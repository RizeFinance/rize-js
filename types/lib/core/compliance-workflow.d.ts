export = ComplianceWorkflow;
/**
 * The Compliance Workflow resource class.
 */
declare class ComplianceWorkflow {
    /** @hideconstructor */
    constructor(api: any, auth: any);
    /** @ignore @protected */ protected _api: any;
    /** @ignore @protected */ protected _auth: any;
    /**
     * Create a new Compliance Workflow.
     * @param {string} customerExternalUid
     * @param {string} email
     * @returns {Promise<ComplianceWorkflowEntity>}
     */
    create(customerExternalUid: string, email: string): Promise<ComplianceWorkflowEntity>;
    renew(customerExternalUid: any, email: any, customerUid: any): void;
    /**
     * Retrieves the most recent Compliance Workflow for a Customer. A Customer UID must be supplied as the path parameter.
     * @returns {Promise<string>}
     */
    viewLatest(): Promise<string>;
    acknowledgeComplianceDocument(workflowUid: any, documentUid: any): void;
}
declare namespace ComplianceWorkflow {
    export { ComplianceWorkflowEntity };
}
type ComplianceWorkflowEntity = {
    /**
     * - A unique identifier generated by Rize.
     */
    uid: string;
    summary: import("./typedefs/compliance-workflow.typedefs").ComplianceWorkflowEntitySummary;
    customer: import("./typedefs/compliance-workflow.typedefs").ComplianceWorkflowEntityCustomer;
    accepted_documents: import("./typedefs/compliance-workflow.typedefs").ComplianceDocument[];
    /**
     * - Compliance Documents that await acknowledgment in the current Step
     */
    current_step_documents_pending: Pick<import("./typedefs/compliance-workflow.typedefs").ComplianceDocument, "electronic_signature_required" | "external_storage_name" | "compliance_document_url" | "name" | "step" | "version" | "uid">[];
    /**
     * - The set of all Compliance Documents that would require acknowledgment
     */
    all_documents: Pick<import("./typedefs/compliance-workflow.typedefs").ComplianceDocument, "electronic_signature_required" | "external_storage_name" | "compliance_document_url" | "name" | "step" | "version">[];
};
