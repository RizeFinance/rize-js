export = ComplianceWorkflow;
/**
 * The Compliance Workflow resource class.
 */
declare class ComplianceWorkflow {
    /**
     * @hideconstructor
     * @param {import('axios').AxiosInstance} api
     * @param {import('./auth')} auth
     */
    constructor(api: import('axios').AxiosInstance, auth: import('./auth'));
    /** @ignore @protected */ protected _api: import("axios").AxiosInstance;
    /** @ignore @protected */ protected _auth: import("./auth");
    /**
     * Creates a new Compliance Workflow.
     * @param {string} customerExternalUid - A Customer identifier supplied by the Partner, unique among the collection of all partner Customers.
     * @param {string} email - Email address associated with the Customer.
     * @returns {Promise<ComplianceWorkflowEntity>} - A promise that returns the new Compliance Workflow entity if resolved.
     */
    create(customerExternalUid: string, email: string): Promise<ComplianceWorkflowEntity>;
    renew(customerExternalUid: any, email: any, customerUid: any): void;
    /**
     * Retrieves the most recent Compliance Workflow for a Customer.
     * @param {string} customerUid - A UID referring to the Customer
     * @returns {Promise<ComplianceWorkflowEntity>}
     */
    viewLatest(): Promise<string>;
    /**
     * Indicate acceptance or rejection of a Compliance Document within a given Compliance Workflow.
     * @param {string} complianceWorkflowUid - A UID referring to the Compliance Workflow.
     * @param {string} customerUid - A UID referring to the Customer.
     * @param {string} documentUid - A UID referring to the Compliance Document being acknowledged.
     * @param {'yes'|'no'} accept - An indicaation of acceptance or rejection.
     * @param {?string} userName - A label associated with the Customer (required for electronic signing).
     * @param {?string} ipAddress - A numerical label assigned to each device connected to a computer network that uses the Internet Protocol for communication (required for electronic signing); in this case, the label associated with the computer used by the Customer.
     * @returns {Promise<ComplianceWorkflowEntity>} - A promise that returns the new Compliance Workflow entity if resolved.
     */
    acknowledgeComplianceDocument(complianceWorkflowUid: string, customerUid: string, documentUid: string, accept: 'yes' | 'no', userName?: string | null, ipAddress?: string | null): Promise<ComplianceWorkflowEntity>;
}
declare namespace ComplianceWorkflow {
    export { ComplianceWorkflowEntity };
}
type ComplianceWorkflowEntity = {
    /**
     * - A unique identifier generated by Rize.
     */
    uid: string;
    summary: import("./typedefs/compliance-workflow.typedefs").ComplianceWorkflowEntitySummary;
    customer: import("./typedefs/compliance-workflow.typedefs").ComplianceWorkflowEntityCustomer;
    accepted_documents: import("./typedefs/compliance-workflow.typedefs").ComplianceDocument[];
    /**
     * - Compliance Documents that await acknowledgment in the current Step
     */
    current_step_documents_pending: Pick<import("./typedefs/compliance-workflow.typedefs").ComplianceDocument, "electronic_signature_required" | "external_storage_name" | "compliance_document_url" | "name" | "step" | "version" | "uid">[];
    /**
     * - The set of all Compliance Documents that would require acknowledgment
     */
    all_documents: Pick<import("./typedefs/compliance-workflow.typedefs").ComplianceDocument, "electronic_signature_required" | "external_storage_name" | "compliance_document_url" | "name" | "step" | "version">[];
};
